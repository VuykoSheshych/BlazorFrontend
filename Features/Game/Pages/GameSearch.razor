@page "/game/search"

@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject GameHubClient GameHubClient
@inject UserSharedService UserSharedService

<PageTitle>Game Search</PageTitle>

<MudPaper Class="pa-6 ma-4 d-flex flex-column align-center justify-center" Elevation="3">
	<MudText Typo="Typo.h5" Class="mb-4">Find a Game</MudText>

	<MudStack Spacing="2" Class="mb-4">
		<MudSelect @bind-Value="selectedTimeControll" Label="Choose time control" Placeholder="Not implemented yet :("
			AdornmentIcon="@Icons.Material.Filled.Timer" AdornmentColor="Color.Primary">
			<MudSelectItem Value="@("Blitz")" Disabled="true">Blitz: 3|2 (disabled)</MudSelectItem>
			<MudSelectItem Value="@("Rapid")" Disabled="true">Rapid: 15|10 (disabled)</MudSelectItem>
			<MudSelectItem Value="@("Classic")" Disabled="true">Classic: 60|30 (disabled)</MudSelectItem>
		</MudSelect>

		<MudButton StartIcon="@mainButtonIcon" Color="@mainButtonColor" Variant="Variant.Filled" OnClick="ToggleSearch"
			Class="mb-4">
			@mainButtonText
		</MudButton>
	</MudStack>

	@if (isSearching)
	{
		<MudText Typo="Typo.subtitle1" Color="Color.Primary">Searching for an opponent...</MudText>
		<MudProgressCircular Indeterminate Color="Color.Primary" Size="Size.Large" Class="mt-2" />
	}
</MudPaper>

@code {
	private string currentUser = string.Empty;
	private string selectedTimeControll = string.Empty;
	private bool isSearching = false;
	private string mainButtonText => isSearching ? "Stop Search" : "Start Search";
	private Color mainButtonColor => isSearching ? Color.Error : Color.Success;
	private string mainButtonIcon => isSearching ? Icons.Material.Filled.Cancel : Icons.Material.Filled.Search;

	protected override async Task OnInitializedAsync()
	{
		currentUser = await UserSharedService.GetCurrentUserNameAsync();
		GameHubClient.OnGameFound += OnGameFound;
	}
	private async Task ToggleSearch()
	{
		if (isSearching)
			await StopGameSearch();
		else
			await StartGameSearch();
	}
	private async Task StartGameSearch()
	{
		if (!string.IsNullOrEmpty(currentUser))
		{
			await GameHubClient.StartGameSearch(currentUser);
			isSearching = true;
		}
	}
	private async Task StopGameSearch()
	{
		if (!string.IsNullOrEmpty(currentUser))
		{
			await GameHubClient.StopGameSearch(currentUser);
			isSearching = false;
		}
	}

	private async Task OnGameFound(string gameId)
	{
		await StopGameSearch();
		NavigationManager.NavigateTo($"/game/active/{gameId}");
	}

	public void Dispose()
	{
		if (isSearching && !string.IsNullOrEmpty(currentUser))
		{
			_ = StopGameSearch();
		}
		GameHubClient.OnGameFound -= OnGameFound;
	}
}
