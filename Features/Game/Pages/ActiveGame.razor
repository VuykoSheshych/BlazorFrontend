@page "/game/active/{gameId}"

@attribute [Authorize]
@inject GameHubClient GameHubClient
@inject UserSharedService UserSharedService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (gameSession is not null)
{
	<MudCard Class="pa-4" Elevation="4">
		<MudGrid Spacing="3">

			<MudItem xs="12" sm="6" class="d-flex flex-column align-center">
				<MudAvatar Size="Size.Large" Class="mb-1">
					<MudImage Src="@(AvatarService.GetAvatarUrl(GetOpponentPlayer()?.Avatar))" />
				</MudAvatar>
				<MudText Typo="Typo.h6">@GetOpponentPlayer()?.Name (@GetOpponentPlayer()?.EloRating)</MudText>
			</MudItem>

			<MudItem xs="12" sm="6" class="d-flex flex-column align-center">
				<MudAvatar Size="Size.Large" Class="mb-1">
					<MudImage Src="@(AvatarService.GetAvatarUrl(GetCurrentPlayer()?.Avatar))" />
				</MudAvatar>
				<MudText Typo="Typo.h6">@GetCurrentPlayer()?.Name (@GetCurrentPlayer()?.EloRating)</MudText>
			</MudItem>

			<MudItem xs="12">
				<MudDivider />
			</MudItem>

			<MudItem xs="12" md="8" class="d-flex align-center justify-center">
				<MudPaper Class="pa-2" Elevation="2">
					<ChessBoard Board="chessBoard" OnSquareClicked="OnSquareClick"
						IsBlack="@(currentUserName == blackPlayer?.Name)" SelectedSquare="@selectedSquare" />
				</MudPaper>
			</MudItem>

			<MudItem xs="12" md="4">
				<MudPaper Class="pa-3" Elevation="1">
					<MudText Typo="Typo.subtitle1" Class="mb-2">Moves</MudText>
					<GameNotation Moves="gameSession.Moves" />

					<MudDivider Class="my-2" />

					<MudButton Variant="Variant.Outlined" Color="Color.Warning" FullWidth
						StartIcon="@Icons.Material.Filled.Flag" OnClick="() => FinishGame(currentUserName!)">
						Concede
					</MudButton>

					<MudStack Spacing="3" Row>
						<MudTextField @bind-Value="chatMessage" Label="Send message to opponent" Variant="Variant.Outlined">
						</MudTextField>
						<MudButton Size="Size.Small" Class="mb-2 mt-2" Variant="Variant.Filled" Color="Color.Primary"
							OnClick="() => SendMessage()">
							Send
						</MudButton>
					</MudStack>

				</MudPaper>
			</MudItem>

		</MudGrid>
	</MudCard>
}
else
{
	<MudPaper Class="pa-6 d-flex flex-column align-center justify-center" Elevation="0">
		<MudText Typo="Typo.h5">Downloading game...</MudText>
		<MudProgressCircular Class="mt-4" Indeterminate Color="Color.Primary" />
	</MudPaper>
}

@code {
	[Parameter] public required string gameId { get; set; }
	private GameSession? gameSession;
	private string? currentUserName;
	private UserDto? whitePlayer;
	private UserDto? blackPlayer;
	private char[,]? chessBoard;
	private (int row, int col)? selectedSquare;
	private MoveResultDto? moveResult;
	private string? chatMessage = string.Empty;
	protected override async Task OnInitializedAsync()
	{
		if (gameId is not null)
		{
			GameHubClient.OnGameStateReceived += OnGameStateReceived;
			GameHubClient.OnMoveRecieved += OnMoveRecieved;
			GameHubClient.OnGameFinished += OnGameFinished;
			GameHubClient.OnMessageReceived += OnMessageReceived;

			await GameHubClient.Connect();
			currentUserName = await UserSharedService.GetCurrentUserNameAsync();
		}
	}
	private async Task OnSquareClick((int row, int col) position)
	{
		if (chessBoard == null || gameSession == null) return;

		char piece = chessBoard[position.row, position.col];

		bool isCurrentUserWhite = currentUserName == gameSession.WhitePlayer.Name;

		if (selectedSquare == null)
		{
			// Якщо це вибрана фігура належить противнику – не даємо її обрати
			if ((isCurrentUserWhite && char.IsLower(piece)) || (!isCurrentUserWhite && char.IsUpper(piece))) return;

			else selectedSquare = position;
		}
		else
		{
			// Якщо гравець повторно натискає на обрану фігуру
			if (selectedSquare == position)
			{
				selectedSquare = null;
				return;
			}

			// Якщо гравець робить хід не під час своєї черги – повідомляемо про неможливість подібного
			else if ((IsWhiteTurn() && !isCurrentUserWhite) || (!IsWhiteTurn() && isCurrentUserWhite))
			{
				OnMoveRecieved(MoveResultDto.Error("It's not your turn to move!"));
				return;
			}

			var from = selectedSquare.Value;
			var to = position;

			await MakeMove(from, to);

			selectedSquare = null;
		}

		StateHasChanged();
	}
	private async Task OnGameStateReceived(GameSession state)
	{
		gameSession = state;

		if (gameSession?.CurrentFen != null)
		{
			chessBoard = ChessBoardService.ConvertFenToMatrix(gameSession.CurrentFen);
		}

		if (whitePlayer is null) whitePlayer = await UserSharedService.GetUserByUserNameAsync(gameSession!.WhitePlayer.Name);
		if (blackPlayer is null) blackPlayer = await UserSharedService.GetUserByUserNameAsync(gameSession!.BlackPlayer.Name);

		StateHasChanged();
	}
	private void OnMessageReceived(ChatMessageDto message)
	{
		Snackbar.Add($"{message.Author}: {message.Text}", Severity.Info, config =>
		{
			config.Icon = Icons.Material.Filled.Message;
			config.IconColor = Color.Warning;
			config.IconSize = Size.Medium;
		});
	}
	private async void OnMoveRecieved(MoveResultDto moveResultDto)
	{
		moveResult = moveResultDto;

		if (!moveResultDto.IsSuccess)
		{
			Snackbar.Add(moveResultDto.Message, Severity.Error);
			await Task.Delay(1000);
			moveResult = null;
		}

		StateHasChanged();
	}
	private Task OnGameFinished(string looser)
	{
		var options = new DialogOptions
		{
			CloseOnEscapeKey = false,
			BackdropClick = false,
			Position = DialogPosition.TopCenter
		};
		var parameters = new DialogParameters { ["Looser"] = looser, ["CurrentUser"] = currentUserName };

		return DialogService.ShowAsync<FinishGameDialog>("The game ended", parameters, options);
	}
	private bool IsWhiteTurn()
	{
		// Якщо ігрова сесія не існує, то за замовчуванням хід білих
		if (gameSession == null) return true;

		// Якщо ігрова сесія не має ходів, то за замовчуванням хід білих
		if (!gameSession.Moves.Any()) return true;

		// Якщо останній хід в грі був за чорними, то хід білих
		if (gameSession.Moves.Last().PlayerColor == PlayerColor.Black) return true;

		return false; // В усіх інших випадках хід чорних
	}
	private UserDto? GetOpponentPlayer()
	{
		return currentUserName == blackPlayer?.Name ? whitePlayer : blackPlayer;
	}
	private UserDto? GetCurrentPlayer()
	{
		return currentUserName == blackPlayer?.Name ? blackPlayer : whitePlayer;
	}
	private async Task MakeMove((int row, int col) from, (int row, int col) to)
	{
		if (gameSession == null || gameId == null) return;

		var move = new MoveDto(from: $"{(char)('a' + from.col)}{8 - from.row}", to: $"{(char)('a' + to.col)}{8 - to.row}");

		await GameHubClient.MakeMove(gameId, move);
		selectedSquare = null;
		StateHasChanged();
	}
	private async Task SendMessage()
	{
		if (string.IsNullOrWhiteSpace(chatMessage)) return;
		await GameHubClient.SendMessage(gameId, new ChatMessageDto(currentUserName, chatMessage));
	}
	private async Task FinishGame(string looser)
	{
		if (gameSession is not null)
		{
			await GameHubClient.FinishGame(gameSession.Id, looser);
		}
	}
	public void Dispose()
	{
		GameHubClient.OnGameStateReceived -= OnGameStateReceived;
		GameHubClient.OnMoveRecieved -= OnMoveRecieved;
		GameHubClient.OnGameFinished -= OnGameFinished;
	}
}