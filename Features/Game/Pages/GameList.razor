@page "/games"

@inject GameRecordService GameRecordService
@inject NavigationManager NavigationManager

<PageTitle>Saved Games</PageTitle>

<MudPaper Class="pa-4 ma-4" Elevation="2">
	<MudText Typo="Typo.h5" Class="mb-4">Saved Chess Games</MudText>

	@if (games == null)
	{
		<MudProgressCircular Indeterminate Color="Color.Primary" />
	}
	else if (games.Count == 0)
	{
		<MudText>No games found.</MudText>
	}
	else
	{
		<MudTable Items="games" Hover="true" Bordered="true" Striped="true">
			<HeaderContent>
				<MudTh>ID</MudTh>
				<MudTh>White</MudTh>
				<MudTh>Black</MudTh>
				<MudTh>Result</MudTh>
				<MudTh>Started (UTC)</MudTh>
				<MudTh>Finished (UTC)</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd>
					<MudLink Href="@($"/games/{context.Id}")">@context.Id</MudLink>
				</MudTd>
				<MudTd>@context.PlayerWhite</MudTd>
				<MudTd>@context.PlayerBlack</MudTd>
				<MudTd>@(context.Result == GameResult.WhiteWin ? "1 0" : context.Result == GameResult.WhiteWin ? "0 1" : "½ ½")</MudTd>
				<MudTd>@context.Started.ToString("yyyy-MM-dd HH:mm")</MudTd>
				<MudTd>@context.Finished.ToString("yyyy-MM-dd HH:mm")</MudTd>
			</RowTemplate>
		</MudTable>
	}
</MudPaper>

@code {
	private List<GameRecord>? games;
	protected override async Task OnInitializedAsync()
	{
		games = await GameRecordService.GetGamesAsync();
	}
}