@page "/game/search"

@attribute [Authorize]
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject GameHubClient GameHubClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<h3>Game Search</h3>

<button @onclick="() => StartGameSearch()">Start search</button>

<button @onclick="() => StopGameSearch()">Stop search</button>

@if (isSearching)
{
	<p>Search opponent to game...</p>
	<MudProgressCircular Indeterminate Color="Color.Primary" />
}

@code {
	private List<string> users = new List<string>();
	private string currentUser = string.Empty;
	private DotNetObjectReference<GameSearch>? objRef;
	private bool isSearching = false;
	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		currentUser = authState.User.Identity?.Name ?? string.Empty;

		if (!string.IsNullOrEmpty(currentUser))
		{
			objRef = DotNetObjectReference.Create(this);
			await JSRuntime.InvokeVoidAsync("addBeforeUnloadListener", objRef);
		}
		GameHubClient.OnGameFound += OnGameFound;
	}

	[JSInvokable]
	public async Task StopGameSearch()
	{
		if (!string.IsNullOrEmpty(currentUser))
		{
			await GameHubClient.StopGameSearch(currentUser);
			isSearching = false;
		}
	}
	private async Task StartGameSearch()
	{
		isSearching = true;

		if (!string.IsNullOrEmpty(currentUser))
		{
			await GameHubClient.Connect();
			await GameHubClient.StartSearch(currentUser);
		}
	}
	private void OnGameFound(string gameId)
	{
		isSearching = false;
		StateHasChanged();

		NavigationManager.NavigateTo($"/game/active/{gameId}");
	}
	public void Dispose()
	{
		objRef?.Dispose();
		if (GameHubClient != null)
		{
			GameHubClient.OnGameFound -= OnGameFound;
		}
	}
}