@page "/game/active/{gameId}"

@attribute [Authorize]
@inject GameHubClient GameHubClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<h3>[DEBUG] Game: @gameId</h3>

@if (gameSession is not null)
{
	@if(moveResult.Contains("[ERROR]"))
	{
		<MudAlert Severity="Severity.Error" Variant="Variant.Outlined">@moveResult</MudAlert>
	}

	<MudText Typo="Typo.body1">[DEBUG] Current FEN: @gameSession.CurrentFen</MudText>

	<MudText Typo="Typo.h4">Opponent: @(currentUser == gameSession.PlayerBlack ? gameSession.PlayerWhite : gameSession.PlayerBlack)</MudText>

	@if (chessBoard != null)
	{
		<ChessBoard Board="chessBoard" OnSquareClicked="OnSquareClick" 
			IsBlack="@(currentUser == gameSession.PlayerBlack)" SelectedSquare="@selectedSquare"/>
	}

	<MudText Typo="Typo.h4">You: @currentUser</MudText>

	<MudText Typo="Typo.h4">Result: @gameSession.Result</MudText>

	@foreach (var r in results)
	{
		<MudButton Variant="Variant.Outlined" @onclick="() => FinishGame(r)">@($"{r}")</MudButton>
	}
}
else
{
	<p>Loading game...</p>
}

@code {
	[Parameter] public string? gameId { get; set; }
	private GameSession? gameSession;
	private string? currentUser;
	private char[,]? chessBoard;
	private (int row, int col)? selectedSquare;
	private string moveResult = "[SUCСESS]";
	private List<string> results = new()
	{
		"White",
		"Black",
		"Draw"
	};
	protected override async Task OnInitializedAsync()
	{
		if (gameId is not null)
		{
			await GameHubClient.Connect();
			currentUser = await GameHubClient.GetCurrentUserAsync();

			GameHubClient.OnGameStateReceived += OnGameStateReceived;
			GameHubClient.OnMoveRecieved += OnMoveRecieved;
			GameHubClient.OnGameFinished += OnGameFinished;
		}
	}
	private async Task OnSquareClick((int row, int col) position)
	{
		if (chessBoard == null || gameSession == null) return;

		char piece = chessBoard[position.row, position.col];

		bool isCurrentUserWhite = currentUser == gameSession.PlayerWhite; // Чи білий цей гравець

		if (selectedSquare == null) 
		{
			// Якщо це вибрана фігура належить противнику – не даємо її обрати
			if ((isCurrentUserWhite && char.IsLower(piece)) || (!isCurrentUserWhite && char.IsUpper(piece))) return;

			else selectedSquare = position;
		}
		else
		{
			// Якщо гравець повторно натискає на обрану фігуру
			if(selectedSquare == position) return;

			// Якщо гравець робить хід не під час своєї черги – повідомляемо про неможливість подібного
			else if((IsWhiteTurn() && !isCurrentUserWhite) || (!IsWhiteTurn() && isCurrentUserWhite))
			{
				OnMoveRecieved("[ERROR] It's not your turn to move!");
				return;
			}

			var from = selectedSquare.Value;
			var to = position;

			await MakeMove(from, to);

			selectedSquare = null;
		}
		
		StateHasChanged();
	}
	private void OnGameStateReceived(GameSession state)
	{
		gameSession = state;

		if (gameSession?.CurrentFen != null)
		{
			chessBoard = ChessBoardService.ConvertFenToMatrix(gameSession.CurrentFen);
		}

		StateHasChanged();
	}
	private void OnMoveRecieved(string moveResult)
    {
        this.moveResult = moveResult;
        
        if (moveResult.Contains("[ERROR]")) HideMoveAlertAfterDelay();

        StateHasChanged();
    }
    private async void HideMoveAlertAfterDelay()
    {
        await Task.Delay(1000);
        moveResult = "[SUCCESS]";
        StateHasChanged();
    }
	private Task OnGameFinished(string winner)
	{
		var options = new DialogOptions
		{
			CloseOnEscapeKey = false,
			BackdropClick = false,
			Position = DialogPosition.TopCenter
		};
		var parameters = new DialogParameters { ["Winner"] = winner, ["CurrentUser"] = currentUser };

		return DialogService.ShowAsync<FinishGameDialog>("The game ended", parameters, options);
	}
	private bool IsWhiteTurn()
	{
		// Якщо ігрова сесія не існує, то за замовчуванням хід білих
		if(gameSession == null) return true;
		
		// Якщо ігрова сесія не має ходів, то за замовчуванням хід білих
		if(!gameSession.Moves.Any()) return true;

		// Якщо останній хід в грі був за чорними, то за хід білих
		if(gameSession.Moves.Last().PlayerColor == "b") return true;
		
		return false; // В усіх інших випадках хід чорних
	}
	private async Task MakeMove((int row, int col) from, (int row, int col) to)
    {
		if (gameSession == null || gameId == null) return;

		bool isCurrentUserWhite = currentUser == gameSession.PlayerWhite; // Чи білий цей гравець

		var move = new MoveDto
		{
			From = $"{(char)('a' + from.col)}{8 - from.row}",
			To = $"{(char)('a' + to.col)}{8 - to.row}"
		};

		await GameHubClient.MakeMove(gameId, move);
		selectedSquare = null;
		StateHasChanged();
    }
	private async Task FinishGame(string result)
	{
		if (gameSession != null)
		{
			gameSession.Result = result;

			await GameHubClient.FinishGame(gameSession.Id, result);
		}
	}
	public void Dispose()
	{
		GameHubClient.OnGameStateReceived -= OnGameStateReceived;
		GameHubClient.OnMoveRecieved -= OnMoveRecieved;
		GameHubClient.OnGameFinished -= OnGameFinished;
	}
}